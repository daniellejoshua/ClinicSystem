// Example: How to use reportService in PatientsManagement.jsx

import reportService from "../../shared/services/reportService";

// Example function for generating patient reports
const generatePatientReport = () => {
  // Prepare filters object
  const filters = {};
  if (searchTerm) filters["Search Term"] = searchTerm;
  if (statusFilter) filters["Status"] = statusFilter;
  if (serviceFilter) filters["Service"] = serviceFilter;

  // Prepare summary statistics
  const statusCounts = {};
  const serviceCounts = {};
  const genderCounts = {};

  filteredPatients.forEach((patient) => {
    // Count by status
    statusCounts[patient.status] = (statusCounts[patient.status] || 0) + 1;
    // Count by service
    if (patient.service_ref) {
      serviceCounts[patient.service_ref] =
        (serviceCounts[patient.service_ref] || 0) + 1;
    }
    // Count by gender
    if (patient.sex || patient.gender) {
      const gender = patient.sex || patient.gender;
      genderCounts[gender] = (genderCounts[gender] || 0) + 1;
    }
  });

  const summary = {
    "Total Patients": filteredPatients.length,
    "Registration Period":
      filteredPatients.length > 0
        ? `${new Date(
            Math.min(
              ...filteredPatients.map(
                (p) =>
                  new Date(p.created_at || p.registration_date || Date.now())
              )
            )
          ).toLocaleDateString()} - ${new Date(
            Math.max(
              ...filteredPatients.map(
                (p) =>
                  new Date(p.created_at || p.registration_date || Date.now())
              )
            )
          ).toLocaleDateString()}`
        : "No data",
    "--- By Status ---": "",
    ...statusCounts,
    "--- By Gender ---": "",
    ...genderCounts,
    "--- By Service ---": "",
    ...serviceCounts,
  };

  // Define columns for the report
  const columns = [
    { key: "full_name", header: "Full Name", width: 3 },
    { key: "email", header: "Email", width: 3 },
    { key: "phone_number", header: "Phone", width: 2 },
    { key: "gender", header: "Gender", width: 1 },
    { key: "date_of_birth", header: "Birth Date", width: 2, type: "date" },
    { key: "status", header: "Status", width: 1 },
    { key: "created_at", header: "Registered", width: 2, type: "datetime" },
  ];

  // Prepare data
  const reportData = filteredPatients.map((patient) => ({
    ...patient,
    full_name: patient.full_name || "Unknown Name",
    gender: patient.sex || patient.gender || "Not specified",
    created_at:
      patient.created_at ||
      patient.registration_date ||
      new Date().toISOString(),
  }));

  // Generate PDF
  reportService.generatePDF({
    title: "Patients Report",
    data: reportData,
    columns,
    filters,
    summary,
    fileName: `patients-report-${new Date().toISOString().split("T")[0]}.pdf`,
  });
};

// Example function for queue reports
const generateQueueReport = () => {
  const filters = {
    Date: new Date().toLocaleDateString(),
    "Queue Type": "Today's Queue",
  };

  const summary = {
    "Total in Queue": queueData.length,
    Waiting: queueData.filter((q) => q.status === "waiting").length,
    "In Progress": queueData.filter((q) => q.status === "in-progress").length,
    Completed: queueData.filter((q) => q.status === "completed").length,
    "Average Wait Time": calculateAverageWaitTime(queueData), // Your calculation
  };

  const columns = [
    { key: "queue_number", header: "Queue #", width: 1 },
    { key: "patient_name", header: "Patient Name", width: 3 },
    { key: "service", header: "Service", width: 2 },
    { key: "priority_flag", header: "Priority", width: 1 },
    { key: "status", header: "Status", width: 1 },
    {
      key: "check_in_time",
      header: "Check-in Time",
      width: 2,
      type: "datetime",
    },
    { key: "estimated_wait", header: "Est. Wait", width: 1 },
  ];

  reportService.generatePDF({
    title: "Queue Management Report",
    data: queueData,
    columns,
    filters,
    summary,
    fileName: `queue-report-${new Date().toISOString().split("T")[0]}.pdf`,
  });
};

// Example for financial/service reports
const generateServiceUtilizationReport = () => {
  const filters = {
    "Report Period": selectedPeriod,
    "Generated By": currentStaff?.full_name || "Admin",
  };

  const summary = {
    "Total Services": services.length,
    "Total Appointments": appointments.length,
    "Most Popular Service": getMostPopularService(appointments), // Your calculation
    "Revenue Generated": calculateTotalRevenue(appointments), // Your calculation
    "Average Appointments per Day": calculateAveragePerDay(appointments), // Your calculation
  };

  const columns = [
    { key: "service_name", header: "Service Name", width: 3 },
    { key: "appointment_count", header: "Appointments", width: 1 },
    { key: "revenue", header: "Revenue", width: 2, type: "currency" },
    { key: "duration_minutes", header: "Duration (min)", width: 1 },
    { key: "last_booked", header: "Last Booked", width: 2, type: "date" },
  ];

  // Prepare service utilization data
  const reportData = services.map((service) => ({
    ...service,
    appointment_count: appointments.filter((a) =>
      a.service_ref?.includes(service.id)
    ).length,
    revenue: calculateServiceRevenue(service.id, appointments),
    last_booked: getLastBookedDate(service.id, appointments),
  }));

  reportService.generatePDF({
    title: "Service Utilization Report",
    data: reportData,
    columns,
    filters,
    summary,
    fileName: `service-utilization-${
      new Date().toISOString().split("T")[0]
    }.pdf`,
    orientation: "landscape", // For wider tables
  });
};

export {
  generatePatientReport,
  generateQueueReport,
  generateServiceUtilizationReport,
};
